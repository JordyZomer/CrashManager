INFO: Seed: 2779989786
INFO: Loaded 0 modules (0 guards): 
Loading corpus dir: /samples/
Loaded 1024/1244 files from /samples/
#0	READ units: 1244
#1244	INITED cov: 1296 bits: 7296 indir: 7 corp: 630/529Kb exec/s: 622 rss: 99Mb
=================================================================
==1818==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000064c7a at pc 0x7f6bd764e5e1 bp 0x7fff10f15370 sp 0x7fff10f15368
READ of size 1 at 0x611000064c7a thread T0
    #0 0x7f6bd764e5e0 in mad_bit_read (/usr/lib/libmad.so.0+0x75e0)
    #1 0x7f6bd76719cd in mad_layer_I (/usr/lib/libmad.so.0+0x2a9cd)
    #2 0x7f6bd765d6c4 in mad_frame_decode (/usr/lib/libmad.so.0+0x166c4)
    #3 0x7f6bd766be4b in run_sync (/usr/lib/libmad.so.0+0x24e4b)
    #4 0x7f6bd766aa9e in mad_decoder_run (/usr/lib/libmad.so.0+0x23a9e)
    #5 0x50e2bd in LLVMFuzzerTestOneInput (/src/libmad-0.15.1b/libmad-fuzzer+0x50e2bd)
    #6 0x4f85f4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/Fuzzer/FuzzerLoop.cpp:536:13
    #7 0x4f87e4 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) /src/Fuzzer/FuzzerLoop.cpp:488:3
    #8 0x4f98ce in fuzzer::Fuzzer::MutateAndTestOne() /src/Fuzzer/FuzzerLoop.cpp:722:30
    #9 0x4f9ae7 in fuzzer::Fuzzer::Loop() /src/Fuzzer/FuzzerLoop.cpp:755:5
    #10 0x4f1ca4 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/Fuzzer/FuzzerDriver.cpp:530:3
    #11 0x4ef6f0 in main /src/Fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f6bd63d482f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #13 0x41b258 in _start (/src/libmad-0.15.1b/libmad-fuzzer+0x41b258)

0x611000064c7a is located 0 bytes to the right of 250-byte region [0x611000064b80,0x611000064c7a)
allocated by thread T0 here:
    #0 0x4ecad0 in operator new[](unsigned long) (/src/libmad-0.15.1b/libmad-fuzzer+0x4ecad0)
    #1 0x4f8537 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/Fuzzer/FuzzerLoop.cpp:527:23

SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib/libmad.so.0+0x75e0) in mad_bit_read
Shadow bytes around the buggy address:
  0x0c2280004930: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2280004940: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2280004950: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2280004960: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2280004970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c2280004980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[02]
  0x0c2280004990: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd
  0x0c22800049a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c22800049b0: fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa
  0x0c22800049c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c22800049d0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1818==ABORTING
MS: 5 InsertByte-ShuffleBytes-ShuffleBytes-CrossOver-CopyPart-; base unit: f438419ae9ba5c55813ff43f16345e3e34825365
0x68,0xc,0x2d,0x79,0x46,0xdc,0x83,0xdb,0x9d,0xb2,0xbf,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0x0,0xff,0xff,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xfe,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0x0,0x0,0x0,0x0,0x0,0x0,0x9d,0xb2,0xbf,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,